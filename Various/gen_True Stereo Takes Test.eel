/* 
   * ReaScript Name:True Stereo Takes Test
   * EEL script for Cockos REAPER
   * Author: EUGEN27771
   * Author URI: http://forum.cockos.com/member.php?u=50462
   * Licence: GPL v3
   * Version: 1.04
*/


/*----------------------------------------------------------
=== New button, slider functions ===========================
----------------------------------------------------------*/
//-- New button function -------
function button_New(x,y,w,h, r,g,b,a, lbl)
(
  this.x = x; this.y = y; this.w = w; this.h = h; // coord
  this.r = r; this.g = g; this.b = b; this.a = a; // color
  this.lbl = lbl;
);

//-- New slider function -------
function slider_New(x,y,w,h, r,g,b,a, lbl, val,min_val,max_val,val_unit)
(
  this.x = x; this.y = y; this.w = w; this.h = h; // coord
  this.r = r; this.g = g; this.b = b; this.a = a; // color
  this.lbl = lbl;
  this.min_val = min_val; 
  this.max_val = max_val;
  this.val = val;
  this.val_unit = val_unit;
  this.norm_val = (val - min_val)/(max_val - min_val);; // norm value
);


/*----------------------------------------------------------
=== Get mouse functions ====================================
----------------------------------------------------------*/
//------------------
function pointIN(p_x, p_y)
( // if point in obj area
  p_x >= this.x && p_x <= this.x+this.w && 
  p_y >= this.y && p_y <= this.y+this.h;
);

function mouseIN()
( // if mouse in obj area
  mouse_cap&1==0 && this.pointIN(mouse_x, mouse_y);
);

//------------------
function mouseDown()
( // if mouse has been pressed in obj area
  mouse_cap&1==1 && this.pointIN(mouse_ox,mouse_oy);
);

function mouseUp()
( // if mouse released(anywhere) and has been pressed in obj area
  mouse_cap&1==0 && this.pointIN(mouse_ox,mouse_oy);
);

function mouseClick()
( // if mouse released in obj area and has been pressed in obj area
  mouse_cap&1==0 &&  last_mouse_cap&1==1 &&
  this.pointIN(mouse_x, mouse_y) && this.pointIN(mouse_ox,mouse_oy);
);
//------------------
function mouseR_Down()
( // if mouse R has been pressed in obj area
  mouse_cap&2==2 && this.pointIN(mouse_ox,mouse_oy);
);

function mouseM_Down()
( // if mouse M has been pressed in obj area
  mouse_cap&64==64 && this.pointIN(mouse_ox,mouse_oy);
);
/*----------------------------------------------------------
=== BUTTON =================================================
----------------------------------------------------------*/
//-- Draw button -------------
function button_draw()
  local(x,y,w,h, r,g,b,a, lbl,lbl_w,lbl_h, val,val_w,val_h)
( 
  x=this.x; y=this.y; w=this.w; h=this.h;
  r=this.r; g=this.g; b=this.b; a=this.a;
  lbl=this.lbl;
  
  this.mouseIN() ? a=a+0.1;
  this.mouseDown() ? a=a+0.15; 
  this.mouseClick() ? this.click=1 : this.click=0;
  
  //-- draw body, frame ---
  gfx_set(r,g,b,a);
  gfx_rect(x,y,w-1,h-1, 1);
  gfx_rect(x,y,w,h, 0);           // frame1
  //gfx_roundrect(x,y,w-1,h-1,3,1); // frame2  
  //-- draw label ---------
  gfx_set(0.9,0.8,0.5,0.9);
  gfx_measurestr(lbl, lbl_w, lbl_h);
  gfx_x = x+(w-lbl_w)/2; gfx_y = y+(h-lbl_h)/2;
  gfx_drawstr(lbl);

);


/*----------------------------------------------------------
=== SLIDER =================================================
----------------------------------------------------------*/
//-- Set slider value --------
function slider_set_value()
 local(norm_val, K )
(
  K = 20; // K = coeff(when Ctrl pressed)
  Ctrl ? (
    norm_val = this.norm_val + ((mouse_x-last_x)/(this.w*K));
  ) : (
    norm_val = (mouse_x-this.x)/this.w;
  );
   
  this.norm_val = min( max(norm_val,0), 1 ); // verify and set value
  this.val = this.min_val + (this.max_val-this.min_val) * this.norm_val;
  this.val = floor(this.val); // floor for this script only
); 

//-- Draw slider -------------
function slider_draw()
  local(x,y,w,h, r,g,b,a, lbl,lbl_w,lbl_h, val,val_w,val_h)
( 
  x=this.x; y=this.y; w=this.w; h=this.h;
  r=this.r; g=this.g; b=this.b; a=this.a;
  lbl=this.lbl;
  
  this.mouseIN() ? a=a+0.1;
  this.mouseDown() ? (
    a=a+0.2; 
    this.slider_set_value();
  );
  
  this.mouseUp() ? (
    //this.onUp(); 
    mouse_ox = mouse_oy = -1; // reset mouse
  );  
  
  //-- draw body, frame ---
  gfx_set(r,g,b,a);
  gfx_rect(x,y,w,h, 0);
  gfx_rect(x,y,w*this.norm_val,h, 1);
  //-- draw label ---------
  gfx_set(0.9,0.8,0.5,0.9);
  gfx_measurestr(lbl, lbl_w, lbl_h);
  gfx_x = x+5; gfx_y = y+(h-lbl_h)/2;
  gfx_drawstr(lbl);
  //-- draw value ---------
  //val = sprintf(#, "%.2f", this.val);
  val = sprintf(#, "%d", this.val); // "%d" for this script only
  strcat(val, this.val_unit); 
  gfx_measurestr(val, val_w, val_h);
  gfx_x = x+w-val_w-5; gfx_y = y+(h-val_h)/2;
  gfx_drawstr(val); // draw Slider Value

);


/*----------------------------------------------------------------------------------------
=== Create controls ======================================================================
----------------------------------------------------------------------------------------*/

//-- Create Sliders --------------------
//-- args = (x,y,w,h, r,g,b,a, lbl, val,min_val,max_val,val_unit)
Diff_sldr.slider_New(10,10,240,18,   0.4,0.4,0.4,0.2, "Difference threshold ",   -80, -150,  -60, " dB" );

//-- Create Buttons --------------------
//-- args = (x,y,w,h, r,g,b,a, lbl)
Start_btn.button_New(10,45,240,25,   0.5,0.5,0.5,0.2, "Set false-stereo to mono");

//======================================================================================//


//----------------------------------------------------------
function Stereo_Test(item, take, srate, minDiff ) 
  local(Stereo, item_len,len_smpls, 
        block_size, n_blocks, last_block_size, AA, 
        starttime_sec, smplbuf, cur_block, smpl)
( 
    item_len  = GetMediaItemInfo_Value(item, "D_LENGTH"); // item length
    //----------------------------------------------------
    len_smpls = floor(item_len*srate);                    // length to samples 
    block_size = 32768;                                   // full block size(samples)
    n_blocks = floor(len_smpls/block_size);               // number of full blocks
    last_block_size = len_smpls - block_size*n_blocks;    // rest(incomplete last block)
    // ---------------------------------------------------
    AA = CreateTakeAudioAccessor(take);
    starttime_sec = 0; // first block start 
    smplbuf = 0;       // smplbuf
    cur_block = 0;     // cur block
    Stereo = 0;        // init state

    // -- Test -------------------------------------------
    while(!Stereo && cur_block <= n_blocks+1) (
        memset(smplbuf, 0, block_size*2); // clear sample buffer
        cur_block == n_blocks ? block_size = last_block_size; // last block = rested samples  
        
        // -- for each L-R sample in block -------
        GetAudioAccessorSamples(AA, srate, 2, starttime_sec, block_size, smplbuf);
        smpl=0;
        loop(block_size,
          abs(smplbuf[smpl] - smplbuf[smpl+1]) > minDiff ? Stereo = 1;
          smpl+=2;   
        );
            
        starttime_sec+=block_size/srate; // next block starttime
        cur_block+=1; // block counter

    );
    
    DestroyAudioAccessor(AA);
  
  Stereo; // return
);

// ---------------------------------------------------------
function RunTest()
  local(minDiff, item_cnt, i, item, take, PCM_source, srate, n_chans,chan_mode, mute_state)  
(
  minDiff = 10^(Diff_sldr.val/20); // dB to norm value
  item_cnt = CountSelectedMediaItems(0);
  
  Undo_BeginBlock();
  i = 0;
  loop(item_cnt, 
    //-- item, take data -------
    item = GetSelectedMediaItem(0, i);            // get sel item
    take = GetActiveTake(item);                   // active take
    PCM_source = GetMediaItemTake_Source(take);   // source
    srate = GetMediaSourceSampleRate(PCM_source); // source srate(MIDI ret zero)
      
      //------------------------
      srate ? (
        n_chans = GetMediaSourceNumChannels(PCM_source);            // source num channels
        chan_mode = GetMediaItemTakeInfo_Value(take, "I_CHANMODE"); // current chan mode
        //----------------------
        n_chans == 2 && chan_mode == 0 ? (
          mute_state = GetMediaItemInfo_Value(item, "B_MUTE");    // item mute_state
          mute_state ? SetMediaItemInfo_Value(item, "B_MUTE", 0); // unmute for test if muted
          !Stereo_Test(item, take, srate, minDiff) ? (
            SetMediaItemTakeInfo_Value(take, "I_CHANMODE", 3);    // set to "mono (left)"
            UpdateItemInProject(item);
          ); 
          mute_state ? SetMediaItemInfo_Value(item, "B_MUTE", 1); // restore orig mute_state
        );
      
      );
      //------------------------
    
    i+=1;
  );
  
  Undo_EndBlock("True Stereo Takes Test", -1);

);
// ---------------------------------------------------------
function Draw_Controls()
(
  //-- sliders -------------
  Diff_sldr.slider_draw(); 
  //-- buttons -------------
  Start_btn.button_draw();
  Start_btn.click ? RunTest();
);

//-- mainloop ------------------
function mainloop()
(
  //-- mouse and modkeys --
  (mouse_cap&1==1 && last_mouse_cap&1==0)  ||       //-- L mouse
  (mouse_cap&2==2 && last_mouse_cap&2==0)  ||       //-- R mouse
  (mouse_cap&64==64 && last_mouse_cap&64==0) ? (    //-- M mouse
    mouse_ox = mouse_x; mouse_oy = mouse_y;
  ); 

  Ctrl  = mouse_cap&4==4;   //-- Ctrl  state
  Shift = mouse_cap&8==8;   //-- Shift state
  Alt   = mouse_cap&16==16; //-- Shift state
  
  //-- Main functions etc --
  Draw_Controls();
  //------------------------
  last_mouse_cap = mouse_cap;
  last_x = mouse_x; last_y = mouse_y;
  char = gfx_getchar();
  char==26 ? Main_OnCommandEx(40029, 0, 0); //-- undo
  char==32 ? Main_OnCommandEx(40044, 0, 0); //-- play
  char >= 0 ? defer("mainloop();");  //-- defer
  gfx_update();
);

//-- init ----------------------
function Init()
  local(width, height, dockstate, xpos, ypos)
( //-- window -----------
  width = 260; height = 80; dockstate = 0; xpos = 650; ypos = 350;
  gfx_init("True Stereo Takes Test",width,height,dockstate,xpos,ypos);
  
  gfx_clear = 20 + 20*256 + 20*65536;
  //-- Init mouse -------
  last_mouse_cap = 0;
  last_x = last_y = 0;
  mouse_ox = mouse_oy = -1;
  
  gfx_setfont(1, "Calibri", 17);
  //gfx_setfont(1, "Arial", 15);
);

/*---------------------------------------
--- Start Script ------------------------
---------------------------------------*/
Init();
mainloop();

//-----------------------
